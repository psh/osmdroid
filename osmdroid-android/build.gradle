description = 'An Android library to display OpenStreetMap views.'
apply plugin: 'com.android.library'
apply plugin: "maven-publish"
apply plugin: 'org.jetbrains.kotlin.android'


group = project.property("pom.groupId")
version =  project.property("pom.version")


android {
    namespace "org.osmdroid.library"
    compileSdk findProperty('android.compileSdkVersion').toInteger()

    defaultConfig{
        targetSdkVersion  findProperty('android.targetSdkVersion').toInteger()
        minSdkVersion Integer.parseInt(project.property('android.minSdkVersion'))
    }

    testOptions {
       unitTests.returnDefaultValues = true
   }
    buildTypes {
        release {
            minifyEnabled false
        }
    }
    publishing {
        singleVariant("release") {
            withSourcesJar()
            withJavadocJar()
        }
    }
    lint {
        abortOnError false
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    gradle.projectsEvaluated {
        preBuild.dependsOn(copyFiles)
    }
}

dependencies {
    implementation libs.androidx.core.ktx
    testImplementation libs.junit.vintage.engine
    testImplementation libs.robolectric
}

tasks.register('cleanCustomFiles', Delete) {
    delete file('src/main/java/org/osmdroid/OsmdroidBuildInfo.java')
}


import org.apache.tools.ant.filters.*
tasks.register('copyFiles', Copy) {
    from 'src/main/filtered/org/osmdroid'
    into 'src/main/java/org/osmdroid'
    filter(ReplaceTokens, tokens: [
            "pom.version": project.property("pom.version"),
            "date"       : new Date().toString()
    ])
}


afterEvaluate {
    publishing {

        publications {
            release(MavenPublication) {
                from components.release
                groupId project.property("pom.groupId")
                artifactId project.name
                version = project.property("pom.version")
                pom {
                    description =  project.description
                    url = project.property("pom.url")

                    //scm, organization and developers are injected via other mechanisms

                    licenses {
                        license {
                            name=project.property("pom.licenses.license.0.name");
                            url=project.property("pom.licenses.license.0.url");
                            distribution==project.property("pom.licenses.license.0.distribution");
                        }

                    }
                }
            }
        }
    }


}


tasks.register('androidSourcesJar', Jar) {
    dependsOn tasks.copyFiles
    mustRunAfter tasks.copyFiles
    from android.sourceSets.main.java.srcDirs
}

artifacts {
//    archives packageReleaseJar
    archives androidSourcesJar

}
clean.dependsOn(copyFiles)
// preBuild task is listed just after androidSourcesJar task in big list of builtin tasks
preBuild.dependsOn(copyFiles)
build.dependsOn(copyFiles)
copyFiles.dependsOn(cleanCustomFiles)