description = 'OpenMap in the Play Store, the example app for using osmdroid'

apply plugin: 'com.android.application'
apply from: "$rootDir/gradle/android-signing.gradle"
apply plugin: 'org.jetbrains.kotlin.android'


group = project.property("pom.groupId")
version = project.property("pom.version")

android {
    namespace "org.osmdroid"
    compileSdk findProperty('android.compileSdkVersion').toInteger()


    defaultConfig {
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"


        applicationId "org.osmdroid"

        minSdkVersion Integer.parseInt(project.property('android.minSdkVersion'))
//        multiDexEnabled = true

        compileSdk(project.hasProperty('android.compileSdkVersion')
                ? Integer.parseInt(project.property('android.compileSdkVersion')) : 34)

        // default targetSdkVersion to API 23, if not provided
        targetSdkVersion(project.hasProperty('android.targetSdkVersion')
                ? Integer.parseInt(project.property('android.targetSdkVersion')) : 30)

        // default versionCode o 1 if not provided
        versionCode(project.hasProperty('android.versionCode')
                ? Integer.parseInt(project.property('android.versionCode')) : 1)

        versionName project.version
    }

    testOptions {
        unitTests.all {
            // All the usual Gradle options.
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }
        }
    }

    buildFeatures {
        buildConfig = true
    }
    packagingOptions {
        resources {
            pickFirsts += ['androidsupportmultidexversion.txt', 'META-INF/AL2.0', 'META-INF/LGPL2.1']
        }
    }

    lint {
        abortOnError false
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }


}


dependencies {
    //apparently google or gradle changed something so that
    //transitive dependencies of submodules in the same project
    //are not longer resolved...

    //osmdroid-mapsforge
    implementation libs.mapsforge.map.android
    implementation libs.mapsforge.map
    implementation libs.mapsforge.themes


    implementation libs.androidx.legacy.support.v4
    implementation project(':osmdroid-android')
    implementation project(':osmdroid-geopackage')
    implementation project(':osmdroid-mapsforge')
    implementation project(':osmdroid-wms')
    implementation project(':osmdroid-shape')

    implementation libs.mil.sym.android.renderer

    //used for various demos for picking offline tile archives
    implementation libs.filepicker

    //used for bookmark demo
    implementation libs.opencsv

    //usual android stuff
    implementation libs.material //needed for UI menuing
    implementation libs.androidx.cardview
    implementation libs.androidx.recyclerview
    implementation libs.androidx.multidex

    implementation libs.androidx.appcompat
    //crash logging
    implementation libs.acra
    implementation libs.androidx.core.ktx


    //on device testing
//    androidTestImplementation 'androidx.multidex:multidex:2.0.1'
//    androidTestImplementation "androidx.annotation:annotation:1.8.2"


    androidTestImplementation libs.androidx.runner
    androidTestImplementation libs.androidx.rules
    // Optional -- UI testing with Espresso
    androidTestImplementation libs.androidx.espresso.core
    // Optional -- UI testing with UI Automator
    androidTestImplementation libs.androidx.uiautomator
    // Optional -- UI testing with Compose
    androidTestImplementation libs.androidx.ui.test.junit4
}


//the following sets the required permissions for API 23+ devices and AVDs

android.applicationVariants.all { variant ->
    if (variant.getBuildType().name == "debug") {
        task "configDevice${variant.name.capitalize()}"(type: Exec) {
            dependsOn variant.install

            group = 'nameofyourtaskgroup'
            description = 'Describe your task here.'

            def adb = android.getAdbExecutable().toString()
            def mypermission = 'android.permission.ACCESS_FINE_LOCATION'
            commandLine "$adb shell pm grant ${variant.applicationId} $mypermission".split(' ')
        }
        variant.testVariant.connectedInstrumentTest.dependsOn "configDevice${variant.name.capitalize()}"
    }
}


android.applicationVariants.all { variant ->
    if (variant.getBuildType().name == "debug") {
        task "configDevice2${variant.name.capitalize()}"(type: Exec) {
            dependsOn variant.install

            group = 'nameofyourtaskgroup'
            description = 'Describe your task here.'

            def adb = android.getAdbExecutable().toString()
            def mypermission = 'android.permission.WRITE_EXTERNAL_STORAGE '
            commandLine "$adb shell pm grant ${variant.applicationId} $mypermission".split(' ')
        }
        variant.testVariant.connectedInstrumentTest.dependsOn "configDevice2${variant.name.capitalize()}"
    }
}
